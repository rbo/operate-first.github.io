{"componentChunkName":"component---src-templates-jupyter-notebook-js","path":"/data-science/ocp-ci-analysis/notebooks/failure-type-classification/failure_type_functions.ipynb","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"jupyterNotebook":{"id":"61af3bbf-f22e-55ac-bde5-7582a07c942a >>> JupyterNotebook","html":"<div class=\"notebook-render\"><div class=\"sc-ifAKCX zMCZx\"><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><h1>Failure type functions</h1>\n<p>This notebook contains the helper functions to run <code>failure_type_classifier.ipynb</code>.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[1]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">import</span> datetime\n<span class=\"token\" style=\"color:#0000ff\">import</span> pandas <span class=\"token\" style=\"color:#0000ff\">as</span> pd\n<span class=\"token\" style=\"color:#0000ff\">import</span> numpy <span class=\"token\" style=\"color:#0000ff\">as</span> np\n<span class=\"token\" style=\"color:#0000ff\">import</span> boto3\n<span class=\"token\" style=\"color:#0000ff\">from</span> io <span class=\"token\" style=\"color:#0000ff\">import</span> BytesIO\n<span class=\"token\" style=\"color:#0000ff\">from</span> scipy<span class=\"token\" style=\"color:#393A34\">.</span>signal <span class=\"token\" style=\"color:#0000ff\">import</span> convolve2d\n<span class=\"token\" style=\"color:#0000ff\">from</span> pathlib <span class=\"token\" style=\"color:#0000ff\">import</span> Path</code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><h2>Metric Template Functions</h2>\n<p>These are functions copied from <code>../data_sources/TestGrid/metrics_template.ipynb</code> as a workaround to <a href=\"https://github.com/elyra-ai/elyra/issues/1734\">this issue</a> where functions imported from notebooks must be in the same directory.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[2]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">decode_run_length</span><span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n    Decodes the run length encoded data into an unrolled form.\n    Returns a list of values.\n\n    E.g. takes in [{&quot;value&quot;:12, &quot;count&quot;:3}, {&quot;value&quot;:1, &quot;count&quot;:2}]\n    and gives [12, 12, 12, 1, 1]\n    &quot;&quot;&quot;</span>\n    lst <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span>\n    <span class=\"token\" style=\"color:#0000ff\">for</span> run_length <span class=\"token\" style=\"color:#0000ff\">in</span> x<span class=\"token\" style=\"color:#393A34\">:</span>\n        extension <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span>run_length<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;value&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">*</span> run_length<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;count&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span>\n        lst<span class=\"token\" style=\"color:#393A34\">.</span>extend<span class=\"token\" style=\"color:#393A34\">(</span>extension<span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> lst</code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[3]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">class</span> <span class=\"token\" style=\"color:#2B91AF\">CephCommunication</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n    Class to establish communication with a ceph s3 bucket.\n    It connects with the bucket and provides methods to read and write data in the parquet format.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">__init__</span><span class=\"token\" style=\"color:#393A34\">(</span>\n        self<span class=\"token\" style=\"color:#393A34\">,</span> s3_endpoint_url<span class=\"token\" style=\"color:#393A34\">,</span> aws_access_key_id<span class=\"token\" style=\"color:#393A34\">,</span> aws_secret_access_key<span class=\"token\" style=\"color:#393A34\">,</span> s3_bucket\n    <span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        self<span class=\"token\" style=\"color:#393A34\">.</span>s3_endpoint_url <span class=\"token\" style=\"color:#393A34\">=</span> s3_endpoint_url\n        self<span class=\"token\" style=\"color:#393A34\">.</span>aws_access_key_id <span class=\"token\" style=\"color:#393A34\">=</span> aws_access_key_id\n        self<span class=\"token\" style=\"color:#393A34\">.</span>aws_secret_access_key <span class=\"token\" style=\"color:#393A34\">=</span> aws_secret_access_key\n        self<span class=\"token\" style=\"color:#393A34\">.</span>s3_resource <span class=\"token\" style=\"color:#393A34\">=</span> boto3<span class=\"token\" style=\"color:#393A34\">.</span>resource<span class=\"token\" style=\"color:#393A34\">(</span>\n            <span class=\"token\" style=\"color:#A31515\">&quot;s3&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span>\n            endpoint_url<span class=\"token\" style=\"color:#393A34\">=</span>self<span class=\"token\" style=\"color:#393A34\">.</span>s3_endpoint_url<span class=\"token\" style=\"color:#393A34\">,</span>\n            aws_access_key_id<span class=\"token\" style=\"color:#393A34\">=</span>self<span class=\"token\" style=\"color:#393A34\">.</span>aws_access_key_id<span class=\"token\" style=\"color:#393A34\">,</span>\n            aws_secret_access_key<span class=\"token\" style=\"color:#393A34\">=</span>self<span class=\"token\" style=\"color:#393A34\">.</span>aws_secret_access_key<span class=\"token\" style=\"color:#393A34\">,</span>\n        <span class=\"token\" style=\"color:#393A34\">)</span>\n        self<span class=\"token\" style=\"color:#393A34\">.</span>bucket <span class=\"token\" style=\"color:#393A34\">=</span> s3_bucket\n        <span class=\"token\" style=\"color:#008000;font-style:italic\">## Todo: Add try catch</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">upload_to_ceph</span><span class=\"token\" style=\"color:#393A34\">(</span>self<span class=\"token\" style=\"color:#393A34\">,</span> dataframe<span class=\"token\" style=\"color:#393A34\">,</span> s3_path<span class=\"token\" style=\"color:#393A34\">,</span> filename<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n        This helper function takes as input the data frame to be uploaded, and the output filename.\n        It then saves the data frame in the defined ceph bucket.\n        &quot;&quot;&quot;</span>\n        parquet_buffer <span class=\"token\" style=\"color:#393A34\">=</span> BytesIO<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span>\n        dataframe<span class=\"token\" style=\"color:#393A34\">.</span>to_parquet<span class=\"token\" style=\"color:#393A34\">(</span>parquet_buffer<span class=\"token\" style=\"color:#393A34\">)</span>\n        s3_obj <span class=\"token\" style=\"color:#393A34\">=</span> self<span class=\"token\" style=\"color:#393A34\">.</span>s3_resource<span class=\"token\" style=\"color:#393A34\">.</span>Object<span class=\"token\" style=\"color:#393A34\">(</span>self<span class=\"token\" style=\"color:#393A34\">.</span>bucket<span class=\"token\" style=\"color:#393A34\">,</span> <span class=\"token string-interpolation\"><span class=\"token\" style=\"color:#A31515\">f&quot;</span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>s3_path<span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">/</span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>filename<span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">&quot;</span></span><span class=\"token\" style=\"color:#393A34\">)</span>\n        status <span class=\"token\" style=\"color:#393A34\">=</span> s3_obj<span class=\"token\" style=\"color:#393A34\">.</span>put<span class=\"token\" style=\"color:#393A34\">(</span>Body<span class=\"token\" style=\"color:#393A34\">=</span>parquet_buffer<span class=\"token\" style=\"color:#393A34\">.</span>getvalue<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span>\n        <span class=\"token\" style=\"color:#0000ff\">return</span> status\n\n    <span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">read_from_ceph</span><span class=\"token\" style=\"color:#393A34\">(</span>self<span class=\"token\" style=\"color:#393A34\">,</span> s3_path<span class=\"token\" style=\"color:#393A34\">,</span> filename<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n        Helper function to read from ceph and see if the saved data is correct.\n        &quot;&quot;&quot;</span>\n        <span class=\"token builtin\">buffer</span> <span class=\"token\" style=\"color:#393A34\">=</span> BytesIO<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span>\n        s3_object <span class=\"token\" style=\"color:#393A34\">=</span> self<span class=\"token\" style=\"color:#393A34\">.</span>s3_resource<span class=\"token\" style=\"color:#393A34\">.</span>Object<span class=\"token\" style=\"color:#393A34\">(</span>self<span class=\"token\" style=\"color:#393A34\">.</span>bucket<span class=\"token\" style=\"color:#393A34\">,</span> <span class=\"token string-interpolation\"><span class=\"token\" style=\"color:#A31515\">f&quot;</span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>s3_path<span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">/</span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>filename<span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">&quot;</span></span><span class=\"token\" style=\"color:#393A34\">)</span>\n        s3_object<span class=\"token\" style=\"color:#393A34\">.</span>download_fileobj<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token builtin\">buffer</span><span class=\"token\" style=\"color:#393A34\">)</span>\n        df_temp <span class=\"token\" style=\"color:#393A34\">=</span> pd<span class=\"token\" style=\"color:#393A34\">.</span>read_parquet<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token builtin\">buffer</span><span class=\"token\" style=\"color:#393A34\">)</span>\n        <span class=\"token\" style=\"color:#0000ff\">return</span> df_temp</code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[4]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">save_to_disk</span><span class=\"token\" style=\"color:#393A34\">(</span>dataframe<span class=\"token\" style=\"color:#393A34\">,</span> path<span class=\"token\" style=\"color:#393A34\">,</span> filename<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n    Helper function to save the dataframe\n    as a parquet file to disk.\n    &quot;&quot;&quot;</span>\n    dataset_base_path <span class=\"token\" style=\"color:#393A34\">=</span> Path<span class=\"token\" style=\"color:#393A34\">(</span>path<span class=\"token\" style=\"color:#393A34\">)</span>\n    dataset_base_path<span class=\"token\" style=\"color:#393A34\">.</span>mkdir<span class=\"token\" style=\"color:#393A34\">(</span>parents<span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">True</span><span class=\"token\" style=\"color:#393A34\">,</span> exist_ok<span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">True</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    dataframe<span class=\"token\" style=\"color:#393A34\">.</span>to_parquet<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token string-interpolation\"><span class=\"token\" style=\"color:#A31515\">f&quot;</span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>path<span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">/</span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>filename<span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">&quot;</span></span><span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n\n\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">read_from_disk</span><span class=\"token\" style=\"color:#393A34\">(</span>path<span class=\"token\" style=\"color:#393A34\">,</span> filename<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n    Helper function to read from disk and see if the saved data is the same.\n    &quot;&quot;&quot;</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> pd<span class=\"token\" style=\"color:#393A34\">.</span>read_parquet<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token string-interpolation\"><span class=\"token\" style=\"color:#A31515\">f&quot;</span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>path<span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">/</span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>filename<span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">&quot;</span></span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><h2>Flakiness detection functions</h2>\n<p>These functions are used in the <code>./testgrid_flakiness_detection.ipynb</code> notebook to determine optimal flake detection calculations.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[5]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">naive_flake_calc</span><span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> <span class=\"token\" style=\"color:#393A34\">(</span>\n        <span class=\"token\" style=\"color:#36acaa\">100</span>\n        <span class=\"token\" style=\"color:#393A34\">*</span> np<span class=\"token\" style=\"color:#393A34\">.</span>logical_or<span class=\"token\" style=\"color:#393A34\">(</span>np<span class=\"token\" style=\"color:#393A34\">.</span>array<span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span><span class=\"token\" style=\"color:#393A34\">,</span> np<span class=\"token\" style=\"color:#393A34\">.</span>array<span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">13</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token builtin\">sum</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span>\n        <span class=\"token\" style=\"color:#393A34\">/</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[6]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">calc_consecutive_failures</span><span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">,</span> i<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;This function calculates number of consecutive failures\n\n    Parameters\n    ----------\n    test_row : array\n            array of test runs with 0, 1, 12 values as not run, pass, fail respectively\n    i : float, int\n            index in array i\n\n    Returns\n    ----------\n    result: int\n            number of consecutive failures from index i\n    &quot;&quot;&quot;</span>\n\n    result <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n    <span class=\"token\" style=\"color:#0000ff\">while</span> i <span class=\"token\" style=\"color:#393A34\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#0000ff\">and</span> <span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span> <span class=\"token\" style=\"color:#0000ff\">or</span> test_row<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">if</span> test_row<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            result <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n        i <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> result\n\n\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">calc_flakiness_score</span><span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">,</span> ignore_failures_in_a_row<span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">3</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;This function calculates flakiness score as the number of edges divided by total runs.\n    At google, If the test is failing three times in a row, then only it reported as real failures;\n    otherwise, it&#x27;s considered a flaky test.\n    (https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html)\n    Hence, we ignored three or more than three consecutive failures\n    and test cases that are not run while calculating the flakiness score.\n\n    We always consider label 13 as an edge.\n    since currently, each failed test is retry, and if it&#x27;s passed on a subsequent run it is considered as flaky.\n\n    Parameters\n    ----------\n    test_row : array\n            array of test runs with 0, 1, 12, 13 values as not run, pass, fail, flaky respectively\n\n    Returns\n    ----------\n    flakiness: int\n            Flakiness score lies between 0 and 100; 0 is no flakiness, and 100 is maximum flakiness.\n    &quot;&quot;&quot;</span>\n    flips <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n    i <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n    <span class=\"token\" style=\"color:#008000;font-style:italic\">## ignore not run instances in the starting</span>\n    <span class=\"token\" style=\"color:#0000ff\">while</span> i <span class=\"token\" style=\"color:#393A34\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#0000ff\">and</span> test_row<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        i <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n\n    <span class=\"token\" style=\"color:#008000;font-style:italic\">## intializing last_passing variable value</span>\n    <span class=\"token\" style=\"color:#0000ff\">if</span> i <span class=\"token\" style=\"color:#393A34\">&gt;=</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">return</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n    <span class=\"token\" style=\"color:#0000ff\">elif</span> test_row<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n    <span class=\"token\" style=\"color:#0000ff\">elif</span> test_row<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">13</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n        flips <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n    <span class=\"token\" style=\"color:#0000ff\">elif</span> test_row<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">False</span>\n    <span class=\"token\" style=\"color:#0000ff\">else</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n    considerd <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n    i <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">while</span> i <span class=\"token\" style=\"color:#393A34\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#008000;font-style:italic\">## ignoring more than three consecutive failures</span>\n        <span class=\"token\" style=\"color:#008000;font-style:italic\">## If the test is consecutively failing for three or more than three runs,</span>\n        <span class=\"token\" style=\"color:#008000;font-style:italic\">## we considered did not consider it an edge.</span>\n        cf <span class=\"token\" style=\"color:#393A34\">=</span> calc_consecutive_failures<span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">,</span> i<span class=\"token\" style=\"color:#393A34\">)</span>\n        <span class=\"token\" style=\"color:#0000ff\">if</span> cf <span class=\"token\" style=\"color:#393A34\">&gt;=</span> ignore_failures_in_a_row<span class=\"token\" style=\"color:#393A34\">:</span>\n            i <span class=\"token\" style=\"color:#393A34\">=</span> i <span class=\"token\" style=\"color:#393A34\">+</span> cf\n            <span class=\"token\" style=\"color:#0000ff\">if</span> i <span class=\"token\" style=\"color:#393A34\">&gt;=</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_row<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n                <span class=\"token\" style=\"color:#0000ff\">break</span>\n\n        s <span class=\"token\" style=\"color:#393A34\">=</span> test_row<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span>\n        <span class=\"token\" style=\"color:#0000ff\">if</span> s <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#008000;font-style:italic\">## run is pass</span>\n            considerd <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n            last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n        <span class=\"token\" style=\"color:#0000ff\">elif</span> s <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#008000;font-style:italic\">## not run</span>\n            <span class=\"token\" style=\"color:#0000ff\">pass</span>\n        <span class=\"token\" style=\"color:#0000ff\">elif</span> s <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">13</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#008000;font-style:italic\">## flaky</span>\n            flips <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n            considerd <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n            last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n        <span class=\"token\" style=\"color:#0000ff\">elif</span> s <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#008000;font-style:italic\">## run is fail</span>\n            considerd <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n            <span class=\"token\" style=\"color:#0000ff\">if</span> last_passing<span class=\"token\" style=\"color:#393A34\">:</span>\n                flips <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n            last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">False</span>\n        i <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n    <span class=\"token\" style=\"color:#0000ff\">if</span> considerd <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">return</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n    <span class=\"token\" style=\"color:#008000;font-style:italic\">## multiplying by 2 since flakiness score lies between 0 and 100</span>\n    flakiness <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">(</span>flips <span class=\"token\" style=\"color:#393A34\">/</span> <span class=\"token\" style=\"color:#393A34\">(</span>considerd<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#393A34\">*</span> <span class=\"token\" style=\"color:#36acaa\">100</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> flakiness</code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[7]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">calc_flake_edges</span><span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;This function calculates the number of edges, the transition of a\n    particular test case from pass to fail.\n\n    Parameters\n    ----------\n    test_array : numpy array\n            array of test runs with 0, 1, 12, 13 values as not run, pass, fail, flaky respectively\n\n    Returns\n    ----------\n    flake_edges: numpy array\n                        array where the value are the starting of the edge\n\n    &quot;&quot;&quot;</span>\n    flake_edges <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span>  <span class=\"token\" style=\"color:#008000;font-style:italic\">## array to store edges</span>\n    ignore_failures_in_a_row <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">3</span>\n    i <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n    valid <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n    <span class=\"token\" style=\"color:#0000ff\">while</span> i <span class=\"token\" style=\"color:#393A34\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#0000ff\">and</span> test_array<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        i <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n    <span class=\"token\" style=\"color:#008000;font-style:italic\">## intializing last_passing variable value</span>\n    <span class=\"token\" style=\"color:#0000ff\">if</span> i <span class=\"token\" style=\"color:#393A34\">&gt;=</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">return</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n    <span class=\"token\" style=\"color:#0000ff\">elif</span> test_array<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n        valid <span class=\"token\" style=\"color:#393A34\">=</span> i\n    <span class=\"token\" style=\"color:#0000ff\">elif</span> test_array<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">13</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n    <span class=\"token\" style=\"color:#0000ff\">elif</span> test_array<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">False</span>\n    <span class=\"token\" style=\"color:#0000ff\">else</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n    i <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n\n    <span class=\"token\" style=\"color:#008000;font-style:italic\">## Finding all the edges in our test runs</span>\n    <span class=\"token\" style=\"color:#0000ff\">while</span> i <span class=\"token\" style=\"color:#393A34\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#008000;font-style:italic\">## ignoring more than three consecutive failures</span>\n        <span class=\"token\" style=\"color:#008000;font-style:italic\">## If the test is consecutively failing for three or more than three runs,</span>\n        <span class=\"token\" style=\"color:#008000;font-style:italic\">## we do not consider it an edge.</span>\n        cf <span class=\"token\" style=\"color:#393A34\">=</span> calc_consecutive_failures<span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">,</span> i<span class=\"token\" style=\"color:#393A34\">)</span>\n        <span class=\"token\" style=\"color:#0000ff\">if</span> cf <span class=\"token\" style=\"color:#393A34\">&gt;=</span> ignore_failures_in_a_row<span class=\"token\" style=\"color:#393A34\">:</span>\n            i <span class=\"token\" style=\"color:#393A34\">=</span> i <span class=\"token\" style=\"color:#393A34\">+</span> cf\n            <span class=\"token\" style=\"color:#0000ff\">if</span> i <span class=\"token\" style=\"color:#393A34\">&gt;=</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n                <span class=\"token\" style=\"color:#0000ff\">break</span>\n\n        s <span class=\"token\" style=\"color:#393A34\">=</span> test_array<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span>\n        <span class=\"token\" style=\"color:#0000ff\">if</span> s <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#008000;font-style:italic\">## run is pass</span>\n            last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n            valid <span class=\"token\" style=\"color:#393A34\">=</span> i\n        <span class=\"token\" style=\"color:#0000ff\">elif</span> s <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#008000;font-style:italic\">## not run</span>\n            <span class=\"token\" style=\"color:#0000ff\">pass</span>\n        <span class=\"token\" style=\"color:#0000ff\">elif</span> s <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">13</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n            flake_edges<span class=\"token\" style=\"color:#393A34\">.</span>append<span class=\"token\" style=\"color:#393A34\">(</span>i<span class=\"token\" style=\"color:#393A34\">)</span>\n        <span class=\"token\" style=\"color:#0000ff\">elif</span> s <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#008000;font-style:italic\">## run is fail</span>\n            <span class=\"token\" style=\"color:#0000ff\">if</span> last_passing<span class=\"token\" style=\"color:#393A34\">:</span>\n                flake_edges<span class=\"token\" style=\"color:#393A34\">.</span>append<span class=\"token\" style=\"color:#393A34\">(</span>valid<span class=\"token\" style=\"color:#393A34\">)</span>\n            last_passing <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">False</span>\n        i <span class=\"token\" style=\"color:#393A34\">=</span> i <span class=\"token\" style=\"color:#393A34\">+</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> flake_edges\n\n\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">flake_edge_end</span><span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">,</span> flake_edges<span class=\"token\" style=\"color:#393A34\">,</span> index<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;This function calculates the end of the edges. Starting of the edge will always be 1 or 13\n\n    Parameters\n    ----------\n    test_array : numpy array\n            array of test runs with 0, 1, 12, 13 values as not run, pass, fail, flaky respectively\n\n    Returns\n    ----------\n    flake_edges: numpy array\n                        array where the value are the starting of the edge\n\n    &quot;&quot;&quot;</span>\n    flake_end <span class=\"token\" style=\"color:#393A34\">=</span> flake_edges<span class=\"token\" style=\"color:#393A34\">[</span>index<span class=\"token\" style=\"color:#393A34\">]</span>\n    <span class=\"token\" style=\"color:#0000ff\">while</span> test_array<span class=\"token\" style=\"color:#393A34\">[</span>flake_end<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">!=</span> <span class=\"token\" style=\"color:#36acaa\">12</span> <span class=\"token\" style=\"color:#0000ff\">and</span> test_array<span class=\"token\" style=\"color:#393A34\">[</span>flake_end<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">!=</span> <span class=\"token\" style=\"color:#36acaa\">13</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        flake_end <span class=\"token\" style=\"color:#393A34\">=</span> flake_end <span class=\"token\" style=\"color:#393A34\">+</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n        <span class=\"token\" style=\"color:#0000ff\">if</span> flake_end <span class=\"token\" style=\"color:#393A34\">&gt;</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#0000ff\">break</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> flake_end\n\n\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">calc_optimal_flakiness_score</span><span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">,</span> threshold<span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">30</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;Calculate the flakiness score between edges since it will maximize the flakiness score.\n    Specifically, we calculate the flakiness score between the two farthest edges\n    which have a flakiness score greater than a threshold.\n\n    Parameters\n    ----------\n    test_array : array\n            array of test runs with 0, 1, 12, 13 values as not run, pass, fail, flaky respectively\n    threshold: int default 30\n\n    Returns\n    ----------\n    modified_test_array: numpy array\n                        modified test grid where the value of failure due to flake is 13\n    flake_edges_dict: dictionary\n            key of the dictionary is a tuple of time period, and value is the flakiness score between the time period\n    &quot;&quot;&quot;</span>\n    modified_test_array <span class=\"token\" style=\"color:#393A34\">=</span> test_array<span class=\"token\" style=\"color:#393A34\">.</span>copy<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    flake_edges_dict <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">{</span><span class=\"token\" style=\"color:#393A34\">}</span>\n    flake_edges <span class=\"token\" style=\"color:#393A34\">=</span> calc_flake_edges<span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#008000;font-style:italic\">## flakiness score between the two farthest edges</span>\n    p <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n    q <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n    <span class=\"token\" style=\"color:#0000ff\">while</span> p <span class=\"token\" style=\"color:#393A34\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>flake_edges<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        possible_flake <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">False</span>\n        <span class=\"token\" style=\"color:#0000ff\">for</span> q <span class=\"token\" style=\"color:#0000ff\">in</span> <span class=\"token builtin\">range</span><span class=\"token\" style=\"color:#393A34\">(</span>p <span class=\"token\" style=\"color:#393A34\">+</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>flake_edges<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            flake_end <span class=\"token\" style=\"color:#393A34\">=</span> flake_edge_end<span class=\"token\" style=\"color:#393A34\">(</span>test_array<span class=\"token\" style=\"color:#393A34\">,</span> flake_edges<span class=\"token\" style=\"color:#393A34\">,</span> q<span class=\"token\" style=\"color:#393A34\">)</span>\n            curr_flake <span class=\"token\" style=\"color:#393A34\">=</span> calc_flakiness_score<span class=\"token\" style=\"color:#393A34\">(</span>\n                test_array<span class=\"token\" style=\"color:#393A34\">[</span>flake_edges<span class=\"token\" style=\"color:#393A34\">[</span>p<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">:</span> flake_end <span class=\"token\" style=\"color:#393A34\">+</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span>\n            <span class=\"token\" style=\"color:#393A34\">)</span>\n            <span class=\"token\" style=\"color:#0000ff\">if</span> curr_flake <span class=\"token\" style=\"color:#393A34\">&gt;</span> threshold<span class=\"token\" style=\"color:#393A34\">:</span>\n                possible_flake <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">True</span>\n                max_flake <span class=\"token\" style=\"color:#393A34\">=</span> curr_flake\n                max_p <span class=\"token\" style=\"color:#393A34\">=</span> flake_edges<span class=\"token\" style=\"color:#393A34\">[</span>p<span class=\"token\" style=\"color:#393A34\">]</span>\n                max_q <span class=\"token\" style=\"color:#393A34\">=</span> flake_end\n            <span class=\"token\" style=\"color:#0000ff\">else</span><span class=\"token\" style=\"color:#393A34\">:</span>\n                <span class=\"token\" style=\"color:#0000ff\">break</span>\n        p <span class=\"token\" style=\"color:#393A34\">=</span> q\n        <span class=\"token\" style=\"color:#0000ff\">if</span> possible_flake<span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#0000ff\">for</span> k <span class=\"token\" style=\"color:#0000ff\">in</span> <span class=\"token builtin\">range</span><span class=\"token\" style=\"color:#393A34\">(</span>max_p<span class=\"token\" style=\"color:#393A34\">,</span> flake_end <span class=\"token\" style=\"color:#393A34\">+</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n                <span class=\"token\" style=\"color:#0000ff\">if</span> modified_test_array<span class=\"token\" style=\"color:#393A34\">[</span>k<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span><span class=\"token\" style=\"color:#393A34\">:</span>\n                    modified_test_array<span class=\"token\" style=\"color:#393A34\">[</span>k<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">13</span>\n                    curr <span class=\"token\" style=\"color:#393A34\">=</span> k <span class=\"token\" style=\"color:#393A34\">+</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n                    <span class=\"token\" style=\"color:#0000ff\">while</span> curr <span class=\"token\" style=\"color:#393A34\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>modified_test_array<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n                        <span class=\"token\" style=\"color:#0000ff\">if</span> modified_test_array<span class=\"token\" style=\"color:#393A34\">[</span>curr<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span><span class=\"token\" style=\"color:#393A34\">:</span>\n                            modified_test_array<span class=\"token\" style=\"color:#393A34\">[</span>curr<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">13</span>\n                        <span class=\"token\" style=\"color:#0000ff\">else</span><span class=\"token\" style=\"color:#393A34\">:</span>\n                            <span class=\"token\" style=\"color:#0000ff\">break</span>\n            arr <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span>\n            arr<span class=\"token\" style=\"color:#393A34\">.</span>append<span class=\"token\" style=\"color:#393A34\">(</span>max_p<span class=\"token\" style=\"color:#393A34\">)</span>\n            arr<span class=\"token\" style=\"color:#393A34\">.</span>append<span class=\"token\" style=\"color:#393A34\">(</span>max_q<span class=\"token\" style=\"color:#393A34\">)</span>\n            flake_edges_dict<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token builtin\">tuple</span><span class=\"token\" style=\"color:#393A34\">(</span>arr<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">=</span> max_flake\n        <span class=\"token\" style=\"color:#0000ff\">if</span> p <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>flake_edges<span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#393A34\">-</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#0000ff\">break</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> modified_test_array<span class=\"token\" style=\"color:#393A34\">,</span> flake_edges_dict</code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[8]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">flake_annotation</span><span class=\"token\" style=\"color:#393A34\">(</span>val_array<span class=\"token\" style=\"color:#393A34\">,</span> flake_score<span class=\"token\" style=\"color:#393A34\">,</span> flake_score_threshold<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token\" style=\"color:#008000;font-style:italic\"># for illustration purposes, we are removing the flaky labels</span>\n    val_array <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">12</span> <span class=\"token\" style=\"color:#0000ff\">if</span> <span class=\"token\" style=\"color:#393A34\">(</span>x <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">13</span><span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#0000ff\">else</span> x <span class=\"token\" style=\"color:#0000ff\">for</span> x <span class=\"token\" style=\"color:#0000ff\">in</span> val_array<span class=\"token\" style=\"color:#393A34\">]</span>\n    <span class=\"token\" style=\"color:#0000ff\">if</span> flake_score <span class=\"token\" style=\"color:#393A34\">&gt;</span> flake_score_threshold<span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">return</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">13</span> <span class=\"token\" style=\"color:#0000ff\">if</span> <span class=\"token\" style=\"color:#393A34\">(</span>x <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span><span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#0000ff\">else</span> x <span class=\"token\" style=\"color:#0000ff\">for</span> x <span class=\"token\" style=\"color:#0000ff\">in</span> val_array<span class=\"token\" style=\"color:#393A34\">]</span>\n    <span class=\"token\" style=\"color:#0000ff\">else</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">return</span> val_array</code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><h2>Failure type classification functions</h2>\n<p>These functions are used in <code>./failure_type_classifier.ipynb</code> to detect different types of flakes.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[9]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">detect_infra_flake</span><span class=\"token\" style=\"color:#393A34\">(</span>data<span class=\"token\" style=\"color:#393A34\">,</span> grid<span class=\"token\" style=\"color:#393A34\">,</span> tab_name<span class=\"token\" style=\"color:#393A34\">,</span> grid_name<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n    This function takes a 2d numpy array &quot;grid&quot; and uses a diagonal edge detecting\n    filter to identify time windows in which &#x27;infrastructure flakes&#x27; occured.\n\n    Returns a list of dates and test indexes\n    &quot;&quot;&quot;</span>\n    infra_flakes_found <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span>\n\n    <span class=\"token\" style=\"color:#008000;font-style:italic\"># 2d filter that will have its highest value when convolved with a diagonal pattern.</span>\n    infra_flake_filter <span class=\"token\" style=\"color:#393A34\">=</span> np<span class=\"token\" style=\"color:#393A34\">.</span>array<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span> <span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    <span class=\"token\" style=\"color:#008000;font-style:italic\"># Find the spots on the map where the convolution had its maximum value.</span>\n    spots <span class=\"token\" style=\"color:#393A34\">=</span> convolve2d<span class=\"token\" style=\"color:#393A34\">(</span>infra_flake_filter<span class=\"token\" style=\"color:#393A34\">,</span> grid<span class=\"token\" style=\"color:#393A34\">,</span> mode<span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#A31515\">&quot;valid&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    infra_flakes <span class=\"token\" style=\"color:#393A34\">=</span> np<span class=\"token\" style=\"color:#393A34\">.</span>where<span class=\"token\" style=\"color:#393A34\">(</span>spots <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">4</span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    dates <span class=\"token\" style=\"color:#393A34\">=</span> data<span class=\"token\" style=\"color:#393A34\">[</span>tab_name<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span>grid_name<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;timestamps&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span>\n    infra_flake_dates <span class=\"token\" style=\"color:#393A34\">=</span> np<span class=\"token\" style=\"color:#393A34\">.</span>array<span class=\"token\" style=\"color:#393A34\">(</span>dates<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token builtin\">list</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span>infra_flakes<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span>\n    infra_flake_dates <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span>\n        datetime<span class=\"token\" style=\"color:#393A34\">.</span>date<span class=\"token\" style=\"color:#393A34\">.</span>fromtimestamp<span class=\"token\" style=\"color:#393A34\">(</span>x <span class=\"token\" style=\"color:#393A34\">//</span> <span class=\"token\" style=\"color:#36acaa\">1000</span><span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#0000ff\">for</span> x <span class=\"token\" style=\"color:#0000ff\">in</span> infra_flake_dates\n    <span class=\"token\" style=\"color:#393A34\">]</span>\n\n    infra_flake_tests <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token builtin\">list</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span>infra_flakes<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    infra_flakes_found <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token builtin\">list</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token builtin\">zip</span><span class=\"token\" style=\"color:#393A34\">(</span>infra_flake_dates<span class=\"token\" style=\"color:#393A34\">,</span> infra_flake_tests<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">return</span> infra_flakes_found\n\n\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">detect_install_flake</span><span class=\"token\" style=\"color:#393A34\">(</span>data<span class=\"token\" style=\"color:#393A34\">,</span> grid<span class=\"token\" style=\"color:#393A34\">,</span> tab_name<span class=\"token\" style=\"color:#393A34\">,</span> grid_name<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n    If greater than 90% of tests are not run for 2 or more consecutive days,\n    then we will record this period as as an install flake.\n    &quot;&quot;&quot;</span>\n    install_flakes <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span>\n\n    n_rows<span class=\"token\" style=\"color:#393A34\">,</span> n_cols <span class=\"token\" style=\"color:#393A34\">=</span> grid<span class=\"token\" style=\"color:#393A34\">.</span>shape\n    grid <span class=\"token\" style=\"color:#393A34\">=</span> pd<span class=\"token\" style=\"color:#393A34\">.</span>DataFrame<span class=\"token\" style=\"color:#393A34\">(</span>grid<span class=\"token\" style=\"color:#393A34\">)</span>\n    not_run_percent <span class=\"token\" style=\"color:#393A34\">=</span> grid<span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token builtin\">apply</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#0000ff\">lambda</span> x<span class=\"token\" style=\"color:#393A34\">:</span> <span class=\"token builtin\">sum</span><span class=\"token\" style=\"color:#393A34\">(</span>x <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#393A34\">/</span> n_rows<span class=\"token\" style=\"color:#393A34\">,</span> axis<span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    install_errors <span class=\"token\" style=\"color:#393A34\">=</span> not_run_percent <span class=\"token\" style=\"color:#393A34\">&gt;</span> <span class=\"token\" style=\"color:#36acaa\">0.90</span>\n    install_error_streaks <span class=\"token\" style=\"color:#393A34\">=</span> run_length_encode<span class=\"token\" style=\"color:#393A34\">(</span>install_errors<span class=\"token\" style=\"color:#393A34\">)</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">for</span> i <span class=\"token\" style=\"color:#0000ff\">in</span> install_error_streaks<span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">if</span> i<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#0000ff\">is</span> <span class=\"token\" style=\"color:#36acaa\">True</span> <span class=\"token\" style=\"color:#0000ff\">and</span> i<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">&gt;=</span> <span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            install_flakes<span class=\"token\" style=\"color:#393A34\">.</span>append<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span>i<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">-</span> i<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span> i<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    dates <span class=\"token\" style=\"color:#393A34\">=</span> data<span class=\"token\" style=\"color:#393A34\">[</span>tab_name<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span>grid_name<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;timestamps&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span>\n    install_flake_dates <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span>\n    <span class=\"token\" style=\"color:#0000ff\">if</span> install_flakes<span class=\"token\" style=\"color:#393A34\">:</span>\n        install_flake_dates <span class=\"token\" style=\"color:#393A34\">=</span> np<span class=\"token\" style=\"color:#393A34\">.</span>array<span class=\"token\" style=\"color:#393A34\">(</span>dates<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token builtin\">list</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span>install_flakes<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span>\n        install_flake_dates <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span>\n            datetime<span class=\"token\" style=\"color:#393A34\">.</span>date<span class=\"token\" style=\"color:#393A34\">.</span>fromtimestamp<span class=\"token\" style=\"color:#393A34\">(</span>x <span class=\"token\" style=\"color:#393A34\">//</span> <span class=\"token\" style=\"color:#36acaa\">1000</span><span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#0000ff\">for</span> x <span class=\"token\" style=\"color:#0000ff\">in</span> install_flake_dates\n        <span class=\"token\" style=\"color:#393A34\">]</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">return</span> install_flake_dates\n\n\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">detect_new_test_failures</span><span class=\"token\" style=\"color:#393A34\">(</span>data<span class=\"token\" style=\"color:#393A34\">,</span> grid<span class=\"token\" style=\"color:#393A34\">,</span> tab_name<span class=\"token\" style=\"color:#393A34\">,</span> grid_name<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n    If 6 or more consecutive failures occur, then we will record this period\n    as a new test failure\n    &quot;&quot;&quot;</span>\n    grid <span class=\"token\" style=\"color:#393A34\">=</span> pd<span class=\"token\" style=\"color:#393A34\">.</span>DataFrame<span class=\"token\" style=\"color:#393A34\">(</span>grid<span class=\"token\" style=\"color:#393A34\">)</span>\n    new_test_failures <span class=\"token\" style=\"color:#393A34\">=</span> grid<span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token builtin\">apply</span><span class=\"token\" style=\"color:#393A34\">(</span>single_new_test_failure<span class=\"token\" style=\"color:#393A34\">,</span> axis<span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    none_empties <span class=\"token\" style=\"color:#393A34\">=</span> new_test_failures<span class=\"token\" style=\"color:#393A34\">[</span>new_test_failures<span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token builtin\">apply</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#0000ff\">lambda</span> x<span class=\"token\" style=\"color:#393A34\">:</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#393A34\">&gt;</span> <span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span>\n\n    dates <span class=\"token\" style=\"color:#393A34\">=</span> data<span class=\"token\" style=\"color:#393A34\">[</span>tab_name<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span>grid_name<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;timestamps&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">for</span> i<span class=\"token\" style=\"color:#393A34\">,</span> j <span class=\"token\" style=\"color:#0000ff\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token\" style=\"color:#393A34\">(</span>none_empties<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        none_empties<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span>np<span class=\"token\" style=\"color:#393A34\">.</span>array<span class=\"token\" style=\"color:#393A34\">(</span>dates<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">[</span>x<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span> x<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#0000ff\">for</span> x <span class=\"token\" style=\"color:#0000ff\">in</span> j<span class=\"token\" style=\"color:#393A34\">]</span>\n\n        none_empties<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span>\n            <span class=\"token\" style=\"color:#393A34\">(</span>\n                datetime<span class=\"token\" style=\"color:#393A34\">.</span>date<span class=\"token\" style=\"color:#393A34\">.</span>fromtimestamp<span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">//</span> <span class=\"token\" style=\"color:#36acaa\">1000</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span>\n                datetime<span class=\"token\" style=\"color:#393A34\">.</span>date<span class=\"token\" style=\"color:#393A34\">.</span>fromtimestamp<span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">//</span> <span class=\"token\" style=\"color:#36acaa\">1000</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span>\n            <span class=\"token\" style=\"color:#393A34\">)</span>\n            <span class=\"token\" style=\"color:#0000ff\">for</span> x <span class=\"token\" style=\"color:#0000ff\">in</span> none_empties<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span>\n        <span class=\"token\" style=\"color:#393A34\">]</span>\n\n    idx <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token builtin\">list</span><span class=\"token\" style=\"color:#393A34\">(</span>none_empties<span class=\"token\" style=\"color:#393A34\">.</span>index<span class=\"token\" style=\"color:#393A34\">)</span>\n    new_test_failures <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">(</span>idx<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span> none_empties<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#0000ff\">for</span> i <span class=\"token\" style=\"color:#0000ff\">in</span> <span class=\"token builtin\">range</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>none_empties<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">return</span> new_test_failures\n\n\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">single_new_test_failure</span><span class=\"token\" style=\"color:#393A34\">(</span>test<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;given a test as an array of values, uses run length encoding to\n    find occurences of 6 or moe consecutive failures for a test.&quot;&quot;&quot;</span>\n    new_test_failure <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span>\n    rle <span class=\"token\" style=\"color:#393A34\">=</span> run_length_encode<span class=\"token\" style=\"color:#393A34\">(</span>test<span class=\"token\" style=\"color:#393A34\">)</span>\n\n    end_of_grid <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span>\n    <span class=\"token\" style=\"color:#0000ff\">if</span> rle<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">0</span> <span class=\"token\" style=\"color:#0000ff\">and</span> rle<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">for</span> i<span class=\"token\" style=\"color:#393A34\">,</span> j <span class=\"token\" style=\"color:#0000ff\">in</span> <span class=\"token builtin\">reversed</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token builtin\">list</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token builtin\">enumerate</span><span class=\"token\" style=\"color:#393A34\">(</span>rle<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">:</span><span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#0000ff\">if</span> j<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">:</span>\n                end_of_grid <span class=\"token\" style=\"color:#393A34\">=</span> rle<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">:</span><span class=\"token\" style=\"color:#393A34\">]</span>\n                <span class=\"token\" style=\"color:#0000ff\">break</span>\n\n        count <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n        <span class=\"token\" style=\"color:#0000ff\">for</span> streak <span class=\"token\" style=\"color:#0000ff\">in</span> end_of_grid<span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#0000ff\">if</span> streak<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">:</span>\n                count <span class=\"token\" style=\"color:#393A34\">+=</span> streak<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span>\n\n        <span class=\"token\" style=\"color:#0000ff\">if</span> count <span class=\"token\" style=\"color:#393A34\">&gt;=</span> <span class=\"token\" style=\"color:#36acaa\">6</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            new_test_failure<span class=\"token\" style=\"color:#393A34\">.</span>append<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span>end_of_grid<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span> end_of_grid<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">return</span> new_test_failure\n\n\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">detect_flaky_test</span><span class=\"token\" style=\"color:#393A34\">(</span>data<span class=\"token\" style=\"color:#393A34\">,</span> grid<span class=\"token\" style=\"color:#393A34\">,</span> tab_name<span class=\"token\" style=\"color:#393A34\">,</span> grid_name<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n    Apply run calc_optimal_flakiness_score to out grid\n    &quot;&quot;&quot;</span>\n\n    flaky_tests <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span>\n    dates <span class=\"token\" style=\"color:#393A34\">=</span> data<span class=\"token\" style=\"color:#393A34\">[</span>tab_name<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span>grid_name<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;timestamps&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span>\n    <span class=\"token\" style=\"color:#0000ff\">for</span> i<span class=\"token\" style=\"color:#393A34\">,</span> j <span class=\"token\" style=\"color:#0000ff\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token\" style=\"color:#393A34\">(</span>grid<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n\n        <span class=\"token\" style=\"color:#008000;font-style:italic\"># use the calc_optimal_flakiness_score function imported from testgrid_flakiness_detection notebook</span>\n        found_flakes <span class=\"token\" style=\"color:#393A34\">=</span> calc_optimal_flakiness_score<span class=\"token\" style=\"color:#393A34\">(</span>grid<span class=\"token\" style=\"color:#393A34\">[</span>i<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span>\n        <span class=\"token\" style=\"color:#0000ff\">if</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>found_flakes<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span>keys<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#393A34\">&gt;</span> <span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            times <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span>np<span class=\"token\" style=\"color:#393A34\">.</span>array<span class=\"token\" style=\"color:#393A34\">(</span>dates<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">[</span>x<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span> x<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#0000ff\">for</span> x <span class=\"token\" style=\"color:#0000ff\">in</span> found_flakes<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span>keys<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span>\n            times <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span>\n                <span class=\"token\" style=\"color:#393A34\">(</span>\n                    datetime<span class=\"token\" style=\"color:#393A34\">.</span>date<span class=\"token\" style=\"color:#393A34\">.</span>fromtimestamp<span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">//</span> <span class=\"token\" style=\"color:#36acaa\">1000</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span>\n                    datetime<span class=\"token\" style=\"color:#393A34\">.</span>date<span class=\"token\" style=\"color:#393A34\">.</span>fromtimestamp<span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">//</span> <span class=\"token\" style=\"color:#36acaa\">1000</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span>\n                <span class=\"token\" style=\"color:#393A34\">)</span>\n                <span class=\"token\" style=\"color:#0000ff\">for</span> x <span class=\"token\" style=\"color:#0000ff\">in</span> times\n            <span class=\"token\" style=\"color:#393A34\">]</span>\n\n            flaky_tests<span class=\"token\" style=\"color:#393A34\">.</span>append<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span>i<span class=\"token\" style=\"color:#393A34\">,</span> found_flakes<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span> times<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">return</span> flaky_tests</code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[10]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">detect_failures</span><span class=\"token\" style=\"color:#393A34\">(</span>data<span class=\"token\" style=\"color:#393A34\">,</span> grid<span class=\"token\" style=\"color:#393A34\">,</span> tab_name<span class=\"token\" style=\"color:#393A34\">,</span> grid_name<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;\n    This takens in a grid and runs all of our detectors and outputs a report\n    &quot;&quot;&quot;</span>\n\n    failure_report <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">{</span><span class=\"token\" style=\"color:#393A34\">}</span>\n\n    <span class=\"token\" style=\"color:#008000;font-style:italic\"># use the decode_run_length function imported from TestGrid_EDA notebook</span>\n    x <span class=\"token\" style=\"color:#393A34\">=</span> np<span class=\"token\" style=\"color:#393A34\">.</span>array<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token builtin\">list</span><span class=\"token\" style=\"color:#393A34\">(</span>pd<span class=\"token\" style=\"color:#393A34\">.</span>DataFrame<span class=\"token\" style=\"color:#393A34\">(</span>grid<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span>statuses<span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token builtin\">apply</span><span class=\"token\" style=\"color:#393A34\">(</span>decode_run_length<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    failure_report<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;flaky_tests&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">=</span> detect_flaky_test<span class=\"token\" style=\"color:#393A34\">(</span>data<span class=\"token\" style=\"color:#393A34\">,</span> x<span class=\"token\" style=\"color:#393A34\">,</span> tab_name<span class=\"token\" style=\"color:#393A34\">,</span> grid_name<span class=\"token\" style=\"color:#393A34\">)</span>\n\n    x <span class=\"token\" style=\"color:#393A34\">=</span> pd<span class=\"token\" style=\"color:#393A34\">.</span>DataFrame<span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token builtin\">apply</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#0000ff\">lambda</span> x<span class=\"token\" style=\"color:#393A34\">:</span> <span class=\"token\" style=\"color:#393A34\">[</span>normalize<span class=\"token\" style=\"color:#393A34\">(</span>y<span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#0000ff\">for</span> y <span class=\"token\" style=\"color:#0000ff\">in</span> x<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    x <span class=\"token\" style=\"color:#393A34\">=</span> np<span class=\"token\" style=\"color:#393A34\">.</span>array<span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">)</span>\n\n    failure_report<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;infra_flake&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">=</span> detect_infra_flake<span class=\"token\" style=\"color:#393A34\">(</span>data<span class=\"token\" style=\"color:#393A34\">,</span> x<span class=\"token\" style=\"color:#393A34\">,</span> tab_name<span class=\"token\" style=\"color:#393A34\">,</span> grid_name<span class=\"token\" style=\"color:#393A34\">)</span>\n    failure_report<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;install_flake&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">=</span> detect_install_flake<span class=\"token\" style=\"color:#393A34\">(</span>data<span class=\"token\" style=\"color:#393A34\">,</span> x<span class=\"token\" style=\"color:#393A34\">,</span> tab_name<span class=\"token\" style=\"color:#393A34\">,</span> grid_name<span class=\"token\" style=\"color:#393A34\">)</span>\n    failure_report<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;new_test_failure&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">=</span> detect_new_test_failures<span class=\"token\" style=\"color:#393A34\">(</span>\n        data<span class=\"token\" style=\"color:#393A34\">,</span> x<span class=\"token\" style=\"color:#393A34\">,</span> tab_name<span class=\"token\" style=\"color:#393A34\">,</span> grid_name\n    <span class=\"token\" style=\"color:#393A34\">)</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">return</span> failure_report</code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[11]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">print_report</span><span class=\"token\" style=\"color:#393A34\">(</span>results<span class=\"token\" style=\"color:#393A34\">,</span> tab_name<span class=\"token\" style=\"color:#393A34\">,</span> grid_name<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span>\n        f&quot;Failure Report <span class=\"token\" style=\"color:#0000ff\">for</span><span class=\"token\" style=\"color:#393A34\">:</span> \\n\\\n    <span class=\"token\" style=\"color:#393A34\">{</span>tab_name<span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">/</span><span class=\"token\" style=\"color:#393A34\">{</span>grid_name<span class=\"token\" style=\"color:#393A34\">}</span>&quot;<span class=\"token\" style=\"color:#393A34\">,</span>\n        end<span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#A31515\">&quot;\\n\\n&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span>\n    <span class=\"token\" style=\"color:#393A34\">)</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;Flaky Tests:&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#0000ff\">for</span> ft <span class=\"token\" style=\"color:#0000ff\">in</span> results<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;flaky_tests&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token string-interpolation\"><span class=\"token\" style=\"color:#A31515\">f&quot;Test number </span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>ft<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\"> had flakes at:&quot;</span></span><span class=\"token\" style=\"color:#393A34\">)</span>\n        <span class=\"token\" style=\"color:#0000ff\">for</span> i <span class=\"token\" style=\"color:#0000ff\">in</span> ft<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token string-interpolation\"><span class=\"token\" style=\"color:#A31515\">f&quot;</span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>i<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\"> to </span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>i<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">&quot;</span></span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;\\b&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span>\n        <span class=\"token\" style=\"color:#A31515\">&quot;Infra Flake:&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span>\n    <span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#0000ff\">for</span> infr <span class=\"token\" style=\"color:#0000ff\">in</span> results<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;infra_flake&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token string-interpolation\"><span class=\"token\" style=\"color:#A31515\">f&quot;Test number </span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>infr<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\"> had an infra flake at </span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>infr<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">&quot;</span></span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;\\b&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;Install Flake:&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#0000ff\">for</span> inst <span class=\"token\" style=\"color:#0000ff\">in</span> results<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;install_flake&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token string-interpolation\"><span class=\"token\" style=\"color:#A31515\">f&quot;An install flake started on </span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>inst<span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">&quot;</span></span><span class=\"token\" style=\"color:#393A34\">)</span>\n\n    <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;\\b&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;New Test Failures:&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#0000ff\">for</span> ntf <span class=\"token\" style=\"color:#0000ff\">in</span> results<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;new_test_failure&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token string-interpolation\"><span class=\"token\" style=\"color:#A31515\">f&quot;Test number </span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>ntf<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\"> had new test failures at:&quot;</span></span><span class=\"token\" style=\"color:#393A34\">)</span>\n        <span class=\"token\" style=\"color:#0000ff\">for</span> i <span class=\"token\" style=\"color:#0000ff\">in</span> ntf<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            <span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token string-interpolation\"><span class=\"token\" style=\"color:#A31515\">f&quot;</span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>i<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\"> to </span><span class=\"token interpolation\"><span class=\"token\" style=\"color:#393A34\">{</span>i<span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">}</span></span><span class=\"token\" style=\"color:#A31515\">&quot;</span></span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[12]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#008000;font-style:italic\"># We want to re-map the values so that the output of the convolution will be more interpretable.</span>\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">normalize</span><span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token\" style=\"color:#0000ff\">if</span> x <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">return</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n    <span class=\"token\" style=\"color:#0000ff\">if</span> x <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">12</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">return</span> <span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">1</span>\n    <span class=\"token\" style=\"color:#0000ff\">if</span> x <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        <span class=\"token\" style=\"color:#0000ff\">return</span> <span class=\"token\" style=\"color:#36acaa\">0</span>\n\n\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">run_length_encode</span><span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token triple-quoted-string\" style=\"color:#A31515\">&quot;&quot;&quot;run length encoding&quot;&quot;&quot;</span>\n\n    rle <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span>\n    count <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n    <span class=\"token\" style=\"color:#0000ff\">for</span> i<span class=\"token\" style=\"color:#393A34\">,</span> j <span class=\"token\" style=\"color:#0000ff\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n        key <span class=\"token\" style=\"color:#393A34\">=</span> j\n        <span class=\"token\" style=\"color:#0000ff\">if</span> i <span class=\"token\" style=\"color:#393A34\">==</span> <span class=\"token builtin\">len</span><span class=\"token\" style=\"color:#393A34\">(</span>x<span class=\"token\" style=\"color:#393A34\">)</span> <span class=\"token\" style=\"color:#393A34\">-</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            rle<span class=\"token\" style=\"color:#393A34\">.</span>append<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span>key<span class=\"token\" style=\"color:#393A34\">,</span> count<span class=\"token\" style=\"color:#393A34\">,</span> i<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span>\n            <span class=\"token\" style=\"color:#0000ff\">break</span>\n        <span class=\"token\" style=\"color:#0000ff\">if</span> key <span class=\"token\" style=\"color:#393A34\">==</span> x<span class=\"token\" style=\"color:#393A34\">[</span>i <span class=\"token\" style=\"color:#393A34\">+</span> <span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            count <span class=\"token\" style=\"color:#393A34\">+=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n        <span class=\"token\" style=\"color:#0000ff\">else</span><span class=\"token\" style=\"color:#393A34\">:</span>\n            rle<span class=\"token\" style=\"color:#393A34\">.</span>append<span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span>key<span class=\"token\" style=\"color:#393A34\">,</span> count<span class=\"token\" style=\"color:#393A34\">,</span> i<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span>\n            count <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token\" style=\"color:#36acaa\">1</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> rle</code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[13]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#008000;font-style:italic\"># Temporary formating of the results dictionary</span>\n<span class=\"token\" style=\"color:#008000;font-style:italic\"># The results dic contains datetime object and</span>\n<span class=\"token\" style=\"color:#008000;font-style:italic\"># tuple keys that can&#x27;t be jsoned. At some point</span>\n<span class=\"token\" style=\"color:#008000;font-style:italic\"># we&#x27;ll have to define an output schema.</span>\n<span class=\"token\" style=\"color:#0000ff\">def</span> <span class=\"token\" style=\"color:#393A34\">format_results</span><span class=\"token\" style=\"color:#393A34\">(</span>results<span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span>\n    <span class=\"token\" style=\"color:#0000ff\">for</span> key <span class=\"token\" style=\"color:#0000ff\">in</span> results<span class=\"token\" style=\"color:#393A34\">:</span>\n        results<span class=\"token\" style=\"color:#393A34\">[</span>key<span class=\"token\" style=\"color:#393A34\">]</span> <span class=\"token\" style=\"color:#393A34\">=</span> <span class=\"token builtin\">str</span><span class=\"token\" style=\"color:#393A34\">(</span>results<span class=\"token\" style=\"color:#393A34\">[</span>key<span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span>\n    <span class=\"token\" style=\"color:#0000ff\">return</span> results</code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><div class=\"sc-bwzfXH jsVRSS prompt\">[ ]</div><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:0.95em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"></code></pre></div></div></div></div>","fields":{"srcLink":"https://github.com/aicoe-aiops/ocp-ci-analysis/blob/master/notebooks/failure-type-classification/failure_type_functions.ipynb"}}},"pageContext":{"id":"61af3bbf-f22e-55ac-bde5-7582a07c942a >>> JupyterNotebook"}},"staticQueryHashes":["117426894","3000541721","3606484676","533861647"]}