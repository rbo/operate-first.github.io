{"componentChunkName":"component---src-templates-markdown-js","path":"/blueprints/blueprint/docs/adr/0015-cluster-resources-amendment.md","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"markdownRemark":{"id":"49d8aefd-4e65-5d5c-b971-3cddb454f2b4","html":"<h1 id=\"declarative-definitions-for-cluster-scoped-resources\" style=\"position:relative;\"><a href=\"#declarative-definitions-for-cluster-scoped-resources\" aria-label=\"declarative definitions for cluster scoped resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declarative Definitions for Cluster Scoped Resources</h1>\n<ul class=\"pf-c-list\">\n<li>Status: accepted</li>\n<li>Deciders: larsks, HumairAK, tumido</li>\n</ul>\n<p>Technical Story: <a href=\"https://github.com/operate-first/blueprint/blob/main/docs/adr/0009-cluster-resources.md\">issue-1</a></p>\n<h2 id=\"context-and-problem-statement\" style=\"position:relative;\"><a href=\"#context-and-problem-statement\" aria-label=\"context and problem statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context and Problem Statement</h2>\n<p>In <a href=\"https://github.com/operate-first/blueprint/blob/main/docs/adr/0009-cluster-resources.md\">ADR-0009</a> we laid out a directory structure of organizing cluster scoped resources. For the most part this has worked out relatively well. However, one thing that was not factored into this structure were the possibilities of name conflicts. Consider the following scenario:</p>\n<p>Suppose we have:</p>\n<ol class=\"pf-c-list\">\n<li>A resource of kind Project named example-project with an apiversion: project.openshift.io/v1</li>\n<li>A resource of kind Project named example-project with an apiversion: config.openshift.io/v1</li>\n</ol>\n<p>Note that their API group differs, but everything else is the same. Both of these resources can exist simultaneously on a live cluster. However, these cannot co-exist in our github repo at <code class=\"language-text\">operate-first/apps/cluster-scope</code>, if we are to use the structuring as defined in <a href=\"https://github.com/operate-first/blueprint/blob/main/docs/adr/0009-cluster-resources.md\">ADR-0015</a>. This is because, using the current structure, they would both need to be stored under <code class=\"language-text\">operate-first/apps/cluster-scope/base/projects/example-project/project.yaml</code>.</p>\n<h2 id=\"considered-options\" style=\"position:relative;\"><a href=\"#considered-options\" aria-label=\"considered options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Considered Options</h2>\n<p>The general consensus has been to keep the current structure and amend it to factor in the API Group. Some suggestions are:</p>\n<ol class=\"pf-c-list\">\n<li>Use the following schema: <code class=\"language-text\">cluster-scope/base/&lt;API_GROUP&gt;-&lt;KIND_PLURAL&gt;/&lt;METADATA_NAME&gt;/&lt;KIND_SINGULAR&gt;.yaml</code>\nThis would factor in the API group as part of the name, and would not require additional nesting of directories</li>\n<li>Use the following schema: <code class=\"language-text\">cluster-scoped-resources/base/&lt;API_GROUP&gt;/&lt;KIND_PLURAL&gt;/&lt;METADATA_NAME&gt;/&lt;KIND_SINGULAR&gt;.yaml</code>\nThis would require additional nesting of directories, but this method has been observed in other tooling (i.e. how must-gather does their organization)</li>\n</ol>\n<p>Both solutions will require a <code class=\"language-text\">kustomization.yaml</code> at the base directory so that each resource may be included within an overlay without modifying the default <code class=\"language-text\">kustomize build</code> behavior.</p>\n<p>There will also be an exception made for <code class=\"language-text\">resourcequotas</code> in that they will be added alongside <code class=\"language-text\">namespace</code> manifests in the <code class=\"language-text\">namespaces</code> directory. This is because the <code class=\"language-text\">resourcequotas</code> are namespaced resources that are heavily coupled to their respective namespace.</p>\n<h2 id=\"preferred-option\" style=\"position:relative;\"><a href=\"#preferred-option\" aria-label=\"preferred option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preferred option</h2>\n<p>We will opt for the second option. The first option may introduce yet another custom way to organize manifests, while the second one seems like a tried and tested method. In the case of the core API group (i.e. where resources like <a href=\"https://docs.openshift.com/container-platform/4.6/rest_api/metadata_apis/namespace-core-v1.html#namespace-core-v1\">namespaces</a> belong), they will be stored at the <code class=\"language-text\">cluster-scope/base</code> path (e.g. <code class=\"language-text\">cluster/scope/base/namespaces/...</code>).</p>\n<p>To better illustrate this, an example of how this layout would look like can be found below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── config.openshift.io\n│   ├── oauths\n│   │   └── cluster\n│   │       ├── kustomization.yaml\n│   │       └── oauth.yaml\n│   └── projects\n│       └── cluster\n│           ├── kustomization.yaml\n│           └── project.yaml\n[...]</code></pre></div>\n<p>Here the two resources included are of kind <code class=\"language-text\">oauths</code> and <code class=\"language-text\">projects</code> (their plural forms), they belong to the API group <code class=\"language-text\">config.openshift.io</code> and their singular name is used as the base resource filename.</p>\n<p>Each resource’s manifest is also accompanied by a <code class=\"language-text\">kustomization.yaml</code> file. As an example the file <code class=\"language-text\">config.openshift.io/oauths/cluster/kustomization.yaml</code> would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> kustomize.config.k8s.io/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Kustomization\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> oauth.yaml</code></pre></div>\n<p>An example of how this resource may be included in an overlay:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> kustomize.config.k8s.io/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Kustomization\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> ../../../base/config.openshift.io/oauths/cluster</code></pre></div>\n<p>Where the <code class=\"language-text\">kustomization.yaml</code> is stored in <code class=\"language-text\">cluster-scope/overlays/$ENVIRONMENT/$CLUSTER/kustomization.yaml</code>.</p>","fields":{"srcLink":"https://github.com/operate-first/blueprint/blob/master/docs/adr/0015-cluster-resources-amendment.md"},"frontmatter":{"title":"","description":null,"extraClasses":null}}},"pageContext":{"id":"49d8aefd-4e65-5d5c-b971-3cddb454f2b4"}},"staticQueryHashes":["117426894","3000541721","3606484676","533861647"]}