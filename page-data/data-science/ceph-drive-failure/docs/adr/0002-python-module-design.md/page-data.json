{"componentChunkName":"component---src-templates-markdown-js","path":"/data-science/ceph-drive-failure/docs/adr/0002-python-module-design.md","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"markdownRemark":{"id":"69e3aa96-fe2b-59c5-9190-cfa94f19fa15","html":"<h1 id=\"python-module-interface-design\" style=\"position:relative;\"><a href=\"#python-module-interface-design\" aria-label=\"python module interface design permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Module Interface Design</h1>\n<h2 id=\"context-and-problem-statement\" style=\"position:relative;\"><a href=\"#context-and-problem-statement\" aria-label=\"context and problem statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context and Problem Statement</h2>\n<p>One of the decision outcomes of <a href=\"0001-handling-dependencies-downstream.md\">ADR #0001</a> was that the trained models and other ML related parts of the code should be removed from the Ceph tree and put in a separate python module instead. Ceph (and other end users) can then simply import this module and run inference on their SMART data. The goal of this ADR is to establish the interface of this module, so that it is easy to integrate into and use within the Ceph codebase.</p>\n<h2 id=\"decision-drivers\" style=\"position:relative;\"><a href=\"#decision-drivers\" aria-label=\"decision drivers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decision Drivers</h2>\n<ul class=\"pf-c-list\">\n<li>End user experience / workflow</li>\n<li>Integration with Ceph</li>\n<li>Implementation complexity</li>\n<li>Ease of adding, removing or replacing models</li>\n</ul>\n<h2 id=\"considered-options\" style=\"position:relative;\"><a href=\"#considered-options\" aria-label=\"considered options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Considered Options</h2>\n<h3 id=\"for-input-format\" style=\"position:relative;\"><a href=\"#for-input-format\" aria-label=\"for input format permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For Input Format</h3>\n<ol class=\"pf-c-list\">\n<li>Raw <code class=\"language-text\">smartctl</code> output json.</li>\n<li>Json with keys <code class=\"language-text\">vendor</code>, <code class=\"language-text\">model_name</code>, <code class=\"language-text\">user_capacity</code>, <code class=\"language-text\">smart_x_raw</code>, <code class=\"language-text\">smart_x_normalized</code>, created from the raw <code class=\"language-text\">smartctl</code> output.</li>\n</ol>\n<h3 id=\"for-output-format\" style=\"position:relative;\"><a href=\"#for-output-format\" aria-label=\"for output format permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For Output Format</h3>\n<ol class=\"pf-c-list\">\n<li>An enum member e.g. <code class=\"language-text\">DiskHealthStatus.WARNING</code> (same idea as <a href=\"https://github.com/python/cpython/blob/ab4da079232356e781743b2782148bc7c03f1ee3/Lib/http/__init__.py#L5\">HTTPStatus</a> enum).</li>\n<li>Strings <code class=\"language-text\">good</code>, <code class=\"language-text\">warning</code>, <code class=\"language-text\">bad</code>.</li>\n<li>\n<p>A result dictionary containing at least the following keys:</p>\n<ul class=\"pf-c-list\">\n<li><code class=\"language-text\">message</code>: string; will hold a short, user-friendly description of the prediction result (one line that can be displayed in <code class=\"language-text\">ceph device ls</code>)</li>\n<li><code class=\"language-text\">is_healthy</code>: boolean; will be <code class=\"language-text\">True</code> if the device is healthy (GOOD), or <code class=\"language-text\">False</code> otherwise (BAD/WARNING)</li>\n</ul>\n<p>It may contain any other keys that are unique to each prediction model. For example, the result of “redhat” prediction model can contain <code class=\"language-text\">status</code> (to hold the enum status <code class=\"language-text\">GOOD</code>/<code class=\"language-text\">WARNING</code>/<code class=\"language-text\">BAD</code>), <code class=\"language-text\">life_expectancy_day_min</code>, <code class=\"language-text\">life_expectancy_day_max</code>, etc.</p>\n</li>\n</ol>\n<h3 id=\"for-where-to-store-trained-models\" style=\"position:relative;\"><a href=\"#for-where-to-store-trained-models\" aria-label=\"for where to store trained models permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For Where to Store Trained Models</h3>\n<ol class=\"pf-c-list\">\n<li>In the python module itself.</li>\n<li>On a GitHub repo or MLflow server or s3 bucket. Create a “ModelStore” class to connect to and pull data from such platforms.</li>\n</ol>\n<h3 id=\"for-running-inference\" style=\"position:relative;\"><a href=\"#for-running-inference\" aria-label=\"for running inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For Running Inference</h3>\n<ol class=\"pf-c-list\">\n<li>\n<p>Manually import the desired predictor, and then run inference.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> disk_health_predictor <span class=\"token keyword\">import</span> RHDiskHealthClassifier</code></pre></div>\n</li>\n</ol>\n<p>model = RHDiskHealthClassifier()\nmodel.predict(input_data)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2. Import the desired predictor by passing an arg to a [factory method](https://www.tutorialspoint.com/python_design_patterns/python_design_patterns_factory.htm), and then run inference. If not provided by user, the `predictor_name` arg can be set via a helper function `get_optimal_predictor_name` that determiens the most suitable predictor based on vendor, model, and type (hdd, ssd, nvme) of disk.\n```python\nfrom disk_health_predictor import DiskHealthClassifierFactory\n\n# option 1: pass name explicitly\nmodel1 = DiskHealthClassifierFactory().create_predictor(&quot;redhat&quot;)\nmodel1.predict(input_data)\n\n# option 2: let the helper func determine name\npredictor_name = DiskHeathClassiferFactory().get_optimal_predictor_name(disk_spec)\nmodel2 = DiskHealthClassifierFactory().create_predictor(predictor_name)\nmodel2.predict(input_data)</code></pre></div>\n<h2 id=\"pros-and-cons-of-the-options\" style=\"position:relative;\"><a href=\"#pros-and-cons-of-the-options\" aria-label=\"pros and cons of the options permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pros and Cons of the Options</h2>\n<h3 id=\"for-input-format-1\" style=\"position:relative;\"><a href=\"#for-input-format-1\" aria-label=\"for input format 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For Input Format</h3>\n<h4 id=\"option-1\" style=\"position:relative;\"><a href=\"#option-1\" aria-label=\"option 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 1</h4>\n<ul class=\"pf-c-list\">\n<li>Good, because does not require user to process <code class=\"language-text\">smartctl</code> json output, and instead offloads this processing / reformatting to the python module.</li>\n<li>Good, because leaves the door open in future for building models based on other <code class=\"language-text\">smartctl</code> fields not used by current models.</li>\n</ul>\n<h4 id=\"option-2\" style=\"position:relative;\"><a href=\"#option-2\" aria-label=\"option 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 2</h4>\n<ul class=\"pf-c-list\">\n<li>Good, because input is a clean, simple, non-nested json.</li>\n<li>Bad, because requires users to do process / reformat <code class=\"language-text\">smartctl</code> json on their own.</li>\n</ul>\n<h3 id=\"for-output-format-1\" style=\"position:relative;\"><a href=\"#for-output-format-1\" aria-label=\"for output format 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For Output Format</h3>\n<h4 id=\"option-1-1\" style=\"position:relative;\"><a href=\"#option-1-1\" aria-label=\"option 1 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 1</h4>\n<ul class=\"pf-c-list\">\n<li>Good, because health statuses will be well defined and would not be able to take invalid values.</li>\n</ul>\n<h4 id=\"option-2-1\" style=\"position:relative;\"><a href=\"#option-2-1\" aria-label=\"option 2 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 2</h4>\n<ul class=\"pf-c-list\">\n<li>Bad, because there it would be possible for health status to take invalid values (i.e. there are no strict rules on what values a string can take).</li>\n<li>Bad, because additional processing might have to be done on output (e.g. <code class=\"language-text\">prediction.lower()==&quot;warning&quot;</code> instead of <code class=\"language-text\">prediction==&quot;warning&quot;</code>)</li>\n</ul>\n<h4 id=\"option-3\" style=\"position:relative;\"><a href=\"#option-3\" aria-label=\"option 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 3</h4>\n<ul class=\"pf-c-list\">\n<li>Good, because provides flexibility in format and level of detail in model output</li>\n<li>Good, because will make serialization simpler</li>\n</ul>\n<h3 id=\"for-where-to-store-trained-models-1\" style=\"position:relative;\"><a href=\"#for-where-to-store-trained-models-1\" aria-label=\"for where to store trained models 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For Where to Store Trained Models</h3>\n<h4 id=\"option-1-2\" style=\"position:relative;\"><a href=\"#option-1-2\" aria-label=\"option 1 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 1</h4>\n<ul class=\"pf-c-list\">\n<li>Good, because works for users running Ceph in disconnected environments.</li>\n<li>Good, because does not rely on additional libraries to connect to storage platforms.</li>\n<li>Bad, because bloats the size of python module.</li>\n</ul>\n<h4 id=\"option-2-2\" style=\"position:relative;\"><a href=\"#option-2-2\" aria-label=\"option 2 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 2</h4>\n<ul class=\"pf-c-list\">\n<li>Good, because provides flexibility in where data scientists can store models.</li>\n<li>Good, because keeps the size of the python module reasonable.</li>\n<li>Good, because provides modularity (i.e. download only those models which user wants).</li>\n<li>Bad, because will not work for users running Ceph in disconnected environments.</li>\n<li>Bad, because introduces more complexity in user workflow.</li>\n</ul>\n<h3 id=\"for-running-inference-1\" style=\"position:relative;\"><a href=\"#for-running-inference-1\" aria-label=\"for running inference 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For Running Inference</h3>\n<h4 id=\"option-1-3\" style=\"position:relative;\"><a href=\"#option-1-3\" aria-label=\"option 1 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 1</h4>\n<ul class=\"pf-c-list\">\n<li>Good, because no intermediate steps have to be done to init models.</li>\n<li>Bad, because need to know what model to use at runtime.</li>\n</ul>\n<h4 id=\"option-2-3\" style=\"position:relative;\"><a href=\"#option-2-3\" aria-label=\"option 2 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option 2</h4>\n<ul class=\"pf-c-list\">\n<li>Good, because allows dynamic instantiation using arguments, which will be the case for Ceph.</li>\n<li>Good, because this is essentially the <a href=\"https://github.com/ceph/ceph/blob/9ab9cc26e200cdc3108525770353b91b3dd6c6d8/src/pybind/mgr/diskprediction_local/predictor.py#L44\">workflow</a> the Ceph module uses currently.</li>\n<li>Good, because allows us to select predictor dynamically based on the disk, in cases where user doesn’t explicitly specify which preditor to use.</li>\n</ul>\n<h2 id=\"decision-outcome\" style=\"position:relative;\"><a href=\"#decision-outcome\" aria-label=\"decision outcome permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decision Outcome</h2>\n<p>Use option #1 for input format, option #3 for output format, option #1 for storing models, and option #2 for running inference. The updated workflow in Ceph module would then look like this</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># in ceph/src/pybind/mgr/diskprediction_local/module.py</span>\n<span class=\"token keyword\">from</span> disk_health_predictor <span class=\"token keyword\">import</span> DiskHealthClassifierFactory<span class=\"token punctuation\">,</span> DiskHealthStatus\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_predict_life_expentancy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> devid<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># get raw smartctl json</span>\n    r<span class=\"token punctuation\">,</span> outb<span class=\"token punctuation\">,</span> outs <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>remote<span class=\"token punctuation\">(</span><span class=\"token string\">\"devicehealth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"show_device_metrics\"</span><span class=\"token punctuation\">,</span> devid<span class=\"token operator\">=</span>devid<span class=\"token punctuation\">,</span> sample<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    health_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>outb<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># initialize model as per args (self.predictor_model = \"redhat\")</span>\n    clf <span class=\"token operator\">=</span> DiskHealthClassifierFactory<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>create_predictor<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>predictor_model<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># predict</span>\n    health_estimate <span class=\"token operator\">=</span> clf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>raw_smartctl_json<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Output: {'is_healthy': False, 'message': 'Disk will fail within 2 weeks', 'status': DiskHealthStatus.BAD, 'life_expectancy_day_min': 0, 'life_expectancy_day_max': 14}</span>\n\n    <span class=\"token keyword\">return</span> health_estimate\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">predict_all_devices</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Tuple<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"predict_all_devices\"</span><span class=\"token punctuation\">)</span>\n    devices <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"devices\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"devices\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> devInfo <span class=\"token keyword\">in</span> devices<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">###</span>\n        <span class=\"token comment\"># SOME CODE HERE</span>\n        <span class=\"token comment\">###</span>\n        result <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_predict_life_expentancy<span class=\"token punctuation\">(</span>devInfo<span class=\"token punctuation\">[</span><span class=\"token string\">\"devid\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> DiskHealthStatus<span class=\"token punctuation\">.</span>UNKNOWN<span class=\"token punctuation\">:</span>\n            life_expectancy_day_min <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">\"life_expectancy_day_min\"</span><span class=\"token punctuation\">]</span>\n            life_expectancy_day_max <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">\"life_expectancy_day_max\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            life_expectancy_day_min <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            life_expectancy_day_max <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre></div>","fields":{"srcLink":"https://github.com/aicoe-aiops/ceph_drive_failure/blob/master/docs/adr/0002-python-module-design.md"},"frontmatter":{"title":"","description":null,"extraClasses":null}}},"pageContext":{"id":"69e3aa96-fe2b-59c5-9190-cfa94f19fa15"}},"staticQueryHashes":["117426894","3000541721","3606484676","533861647"]}